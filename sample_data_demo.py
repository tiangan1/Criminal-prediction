# -*- coding: utf-8 -*-
"""Sample Data Demo.ipynb

Automatically generated by Colaboratory.


## Sample Data Demo
"""

import pandas as pd

#data_raw = pd.read_csv('NYPD_Complaint_Sample_Data.csv')
#data_raw = pd.read_csv('NYC_Crime_sampling.csv')
from google.colab import drive
drive.mount('/content/gdrive')

data_raw = pd.read_csv('/content/gdrive/My Drive/Colab Notebooks/Criminal_Prediction/NYPD_Complaint_Sample_Data.csv')

data_raw

# remove columns we don't need
data = data_raw.drop(columns=['Unnamed: 0', 'PARKS_NM', 'HADEVELOPT', 
                              'HOUSING_PSA', 'TRANSIT_DISTRICT',
                              'STATION_NAME', 'Lat_Lon', 'LOC_OF_OCCUR_DESC',
                              'CMPLNT_TO_DT', 'CMPLNT_TO_TM']).dropna().reset_index(drop=True)

# remove UNKNOWN values in our dataset
for i in data.columns:
    data = data[data[i] != 'UNKNOWN']
data = data.reset_index(drop=True)

data

# Change COMPLNT_FR_TM to datetime.time type
data.CMPLNT_FR_TM = pd.to_datetime(data.CMPLNT_FR_TM, format='%H:%M:%S').dt.time
type(data.CMPLNT_FR_TM[0])

data = pd.read_csv('/content/gdrive/My Drive/Colab Notebooks/Criminal_Prediction/NYC_Crime_sampling.csv')

data = data.drop(columns=['Unnamed: 0'])

print('We have total {} observations and {} variables.'.format(data.shape[0], data.shape[1]))
print("\nHere are first 5 row of our sample data.\n")
data.head()

import colorlover as cl
from IPython.display import HTML
HTML(cl.to_html( cl.flipper()['seq']['3'] ))

colors = cl.scales['9']['seq']['GnBu']
print('Color we chose in this notebook:\n')
HTML(cl.to_html(colors))

# Visulize number of crimes in NYC Boroughs
data.BORO_NM.value_counts().sort_index()

import plotly.graph_objs as go
import plotly.offline as py

trace1 = go.Bar(x = data.BORO_NM.value_counts().sort_index().index, 
                y = data.BORO_NM[data.LAW_CAT_CD == 'MISDEMEANOR'].value_counts().sort_index(),
                name = 'MISDEMEANOR', 
                text = (data.BORO_NM[data.LAW_CAT_CD == 'MISDEMEANOR'].value_counts()/data.BORO_NM.value_counts()).apply(lambda x: format(x, '.2%')).sort_index(),
                hovertext='Ratio: '+ (data.BORO_NM[data.LAW_CAT_CD == 'MISDEMEANOR'].value_counts()/data.BORO_NM.count()).apply(lambda x: format(x, '.3%')).sort_index(),
                textposition = 'inside', 
                insidetextanchor='middle',
                textfont = dict(size=16),
                marker = dict(color=colors[4], 
                              line=dict(color=colors[7],
                                        width=2)),
                opacity = 0.6) 
trace2 = go.Bar(x = data.BORO_NM.value_counts().sort_index().index, 
                y = data.BORO_NM[data.LAW_CAT_CD == 'FELONY'].value_counts().sort_index(),
                name = 'FELONY',
                text = (data.BORO_NM[data.LAW_CAT_CD == 'FELONY'].value_counts()/data.BORO_NM.value_counts()).apply(lambda x: format(x, '.2%')).sort_index(),
                hovertext ='Ratio: '+ (data.BORO_NM[data.LAW_CAT_CD == 'FELONY'].value_counts()/data.BORO_NM.count()).apply(lambda x: format(x, '.3%')).sort_index(),
                textposition = 'inside', 
                insidetextanchor='middle',
                textfont = dict(size=16),
                marker = dict(color=colors[8], 
                              line=dict(color=colors[7],
                                        width=2)),
                opacity = 0.6)
trace3 = go.Bar(x = data.BORO_NM.value_counts().sort_index().index, 
                y = data.BORO_NM[data.LAW_CAT_CD == 'VIOLATION'].value_counts().sort_index(),
                name = 'VIOLATION', 
                text = (data.BORO_NM[data.LAW_CAT_CD == 'VIOLATION'].value_counts()/data.BORO_NM.value_counts()).apply(lambda x: format(x, '.2%')).sort_index(),
                hovertext= 'Ratio: '+ (data.BORO_NM[data.LAW_CAT_CD == 'VIOLATION'].value_counts()/data.BORO_NM.count()).apply(lambda x: format(x, '.3%')).sort_index(),
                textposition = 'inside', 
                insidetextanchor='middle',
                textfont = dict(size=16),
                marker = dict(color=colors[3], 
                              line=dict(color=colors[7],
                                        width=2)),
                opacity = 0.6)

d=[trace1,trace2,trace3]

layout = go.Layout(title = {'text':'No. of Crimes in NYC Boroughs',
                            'y':0.9,
                            'x':0.5,
                            'xanchor':'center',
                            'yanchor': 'top'},  
                   xaxis = dict(title = 'Borough'),
                   yaxis = dict(title = 'No. of Crimes'), width=800, height=600)

figure = go.Figure(data = d, layout = layout)
figure.update_layout(barmode='stack')
py.iplot(figure)

# Visulize different level of crime in different boroughs
data_count=data.BORO_NM[data.LAW_CAT_CD != 'VIOLATION'].value_counts().sort_index()
mis = data.BORO_NM[data.LAW_CAT_CD == 'MISDEMEANOR'].value_counts().sort_index()
mis_ratio=(mis/data_count.sum()).apply(lambda x: format(x, '.3%'))
fel = data.BORO_NM[data.LAW_CAT_CD == 'FELONY'].value_counts().sort_index()
fel_ratio=(fel/data_count.sum()).apply(lambda x: format(x, '.3%'))
total= (mis + fel).sort_index()
trace1 = go.Bar(x = data.BORO_NM.value_counts().sort_index().index,
                y = mis,
                hovertext= 'Ratio: '+mis_ratio,
                text = (mis/total).apply(lambda x: format(x, '.2%')).sort_index(),
                textposition = 'inside', 
                insidetextanchor='middle',
                textfont = dict(size=16),
                name = 'MISDEMEANOR',
                marker = dict(color=colors[7]),
                opacity = 0.7)

trace2 = go.Bar(x = data.BORO_NM.value_counts().sort_index().index,
                y = fel,
                hovertext= 'Ratio: '+ fel_ratio,
                text = (fel/total).apply(lambda x: format(x, '.2%')).sort_index(),
                textposition = 'inside', 
                insidetextanchor='middle',
                textfont = dict(size=16),
                name = 'FELONY',
                marker = dict(color=colors[5]),
                opacity = 0.7)


d = [trace1, trace2]

layout = go.Layout(title = {'text':'No. of Crimes in NYC Boroughs in Different Levels',
                            'y':0.9,
                            'x':0.5,
                            'xanchor':'center',
                            'yanchor': 'top'},  
                   barmode='group',
                   xaxis = dict(title = 'Borough'),
                   yaxis = dict(title = 'No. of Crimes'), width=800, height=600)

figure = go.Figure(data=d, layout=layout)
py.iplot(figure)

"""The percentage of misdemeanor, felony, violation is affected by removing missing values."""

print('Offence Level in Raw Data')
data_raw.LAW_CAT_CD.value_counts()

print('Offence Level in Sample Data')
data.LAW_CAT_CD.value_counts()

# Visulize different level of crime in different Race
data.SUSP_RACE.value_counts().sort_index()

data.SUSP_RACE.value_counts().sort_index().index

mis = data.SUSP_RACE[data.LAW_CAT_CD == 'MISDEMEANOR'].value_counts().sort_index()
mis_ratio=(mis/data.SUSP_RACE.count()).apply(lambda x: format(x, '.3%')).sort_index()
fel = data.SUSP_RACE[data.LAW_CAT_CD == 'FELONY'].value_counts().sort_index()
fel_ratio=(fel/data.SUSP_RACE.count()).apply(lambda x: format(x, '.3%')).sort_index()
total = (mis + fel).sort_index()
trace1 = go.Bar(x = data.SUSP_RACE.value_counts().sort_index().index,
                y = mis,
                hovertext= mis_ratio,
                text = (mis/total).apply(lambda x: format(x, '.2%')).sort_index(),
                textposition = 'outside',
                name = 'MISDEMEANOR',
                marker = dict(color=colors[7]),
                opacity = 0.7)

trace2 = go.Bar(x = data.SUSP_RACE.value_counts().sort_index().index,
                y = fel,
                hovertext= fel_ratio,
                text = (fel/total).apply(lambda x: format(x, '.2%')).sort_index(),
                textposition = 'outside',
                name = 'FELONY',
                marker = dict(color=colors[5]),
                opacity = 0.7)

d = [trace1, trace2]

layout = go.Layout(title = {'text':'No. of Crimes in Suspect Race in Different Levels',
                            'y':0.9,
                            'x':0.5,
                            'xanchor':'center',
                            'yanchor': 'top'},  
                   barmode='group',
                   xaxis = dict(title = 'Suspect Race'),
                   yaxis = dict(title = 'No. of Crimes'), width=800, height=600)

figure = go.Figure(data=d, layout=layout)
py.iplot(figure)

data.CMPLNT_FR_TM = pd.to_datetime(data.CMPLNT_FR_TM, format='%H:%M:%S').dt.time
type(data.CMPLNT_FR_TM[0])

# Violin plot of crimes in days of week

data['cmp_day'] = pd.to_datetime(data.CMPLNT_FR_DT, format='%Y-%m-%d').dt.dayofweek
data.CMPLNT_FR_TM = data.CMPLNT_FR_TM.apply(lambda x: x.hour)
days = {0: 'Monday', 1: 'Tuesday', 2: 'Wednesday',
        3: 'Thursday', 4: 'Friday', 5: 'Saturday', 6: 'Sunday'}
data['cmp_day'] = data['cmp_day'].map(days)

array = ['Monday', 'Tuesday', 'Wednesday',
         'Thursday', 'Friday', 'Saturday',
         'Sunday']

data.cmp_day = pd.Categorical(data.cmp_day, categories=array, ordered=True)
data.sort_values(by='cmp_day', inplace=True)

pd.unique(data.cmp_day)

d = []
for i in range(0, len(pd.unique(data.cmp_day))):
    trace = go.Violin(x = data.cmp_day[data.cmp_day == pd.unique(data.cmp_day)[i] and data.LAW_CAT_CD != 'VIOLATION'],
                      y = data.ADDR_PCT_CD[data.cmp_day == pd.unique(data.cmp_day)[i] and data.LAW_CAT_CD != 'VIOLATION'].value_counts(),
                      name = pd.unique(data.cmp_day)[i],
                      box_visible=True, 
                      meanline_visible=True,
                      line_color=colors[i+2])
    d.append(trace)

fig = {'data' : d,
       'layout': {'title': 'Total Crimes Distribution by Days',
                  'xaxis': {'title': 'Days'},
                  'yaxis': {'title': 'No. of Crimes',
                            'zeroline': False},
                  'height': 800}}

py.iplot(fig, validate=False)

# Visulize crime by hour
hour = data.groupby('CMPLNT_FR_TM')[data.LAW_CAT_CD != 'VIOLATION'].count()
trace = go.Bar(x=hour.index,
               y = hour.ADDR_PCT_CD,
               name='Number of Crimes',
               marker=dict(color = colors[5],
                           line=dict(color=colors[7],
                                     width=2.5),
                           opacity=0.7))

d = [trace]

layout = go.Layout(title=dict(text = 'No. of Crimes by hour',
                              y=0.9, x=0.5,
                              xanchor='center',
                              yanchor='top'),
                   xaxis=dict(title='Hour',
                              tick0=0,
                              dtick=1),
                   yaxis=dict(title='No. of Crimes'),
                   barmode='stack',
                   height=600,
                   width=1200)

figure = go.Figure(data=d, layout=layout)

py.iplot(figure)

pip install geopandas

import geopandas as gpd 

mapbox_access_token = 'pk.eyJ1IjoiZmlzaGVlcCIsImEiOiJjazgwcXd5amIwMnRtM2ZwNDR5OHRjb2Q1In0.wUN67xk4G_3OYy9-tqoqgA'

d = [go.Scattermapbox(
        lat=data.Latitude[data.LAW_CAT_CD == 'VIOLATION'],
        lon=data.Longitude[data.LAW_CAT_CD == 'VIOLATION'],
        mode='markers',
        name='Violation',
        marker=go.scattermapbox.Marker(size=8,
                                       color=cl.scales['9']['seq']['Greens'][6]),
        text=["NYC"]),
        go.Scattermapbox(
        lat=data.Latitude[data.LAW_CAT_CD == 'FELONY'],
        lon=data.Longitude[data.LAW_CAT_CD == 'FELONY'],
        mode='markers',
        name='Felony',
        marker=go.scattermapbox.Marker(size=8,
                                       color=colors[7])),
        go.Scattermapbox(
        lat=data.Latitude[data.LAW_CAT_CD == 'MISDEMEANOR'],
        lon=data.Longitude[data.LAW_CAT_CD == 'MISDEMEANOR'],
        mode='markers',
        name='Misdemeanor',
        marker=go.scattermapbox.Marker(size=3,
                                       color=cl.scales['9']['seq']['Reds'][6]))
        ]


layout = go.Layout(
    title=dict(text = 'NYC Crimes Locations',
                              y=0.95, x=0.5,
                              xanchor='center',
                              yanchor='top'),
    autosize=True,
    hovermode='closest',
    mapbox=dict(
        accesstoken=mapbox_access_token,
        bearing=0,
        center=dict(lat=40.729302,
                    lon=-73.986670),
        pitch=45,
        zoom=10,
        style='mapbox://styles/mapbox/light-v10'),
    height=900)

fig = dict(data=d, layout=layout)

py.iplot(fig)

import folium
from folium.plugins import HeatMap

# Create basic Folium crime map
crime_map = folium.Map(location=[40.729302,-73.986670], 
                       tiles="Stamen Toner",
                       width=1200,
                       height=600,
                       zoom_start = 10)

# Add data for heatmp 

data_heatmap = data[['Latitude','Longitude']]
data_heatmap = data.dropna(axis=0, subset=['Latitude','Longitude'])
data_heatmap = [[row['Latitude'],row['Longitude']] for index, row in data_heatmap.iterrows()]
HeatMap(data_heatmap, radius=10).add_to(crime_map)

# Plot!
crime_map

"""1. violation，felony, misdemeanor单独列出, felony, misdemeanor总和列出来
2. CNN
"""

#open data files
subway_data=pd.read_csv('/content/gdrive/My Drive/Colab Notebooks/Criminal_Prediction/Subway_Data.csv')
tramway_data=pd.read_csv('/content/gdrive/My Drive/Colab Notebooks/Criminal_Prediction/Tramway_Data.csv')
nyc_bus_data=pd.read_csv('/content/gdrive/My Drive/Colab Notebooks/Criminal_Prediction/NYC_Bus_Data.csv')
other_bus_data=pd.read_csv('/content/gdrive/My Drive/Colab Notebooks/Criminal_Prediction/Other_Bus_Data.csv')
chain_store_data=pd.read_csv('/content/gdrive/My Drive/Colab Notebooks/Criminal_Prediction/Chain_Store_Data.csv')

#drop the unamed column
subway_data=subway_data.drop(columns=['Unnamed: 0'])
tramway_data=tramway_data.drop(columns=['Unnamed: 0']) #empty
nyc_bus_data=nyc_bus_data.drop(columns=['Unnamed: 0'])
other_bus_data=other_bus_data.drop(columns=['Unnamed: 0'])
chain_store_data=chain_store_data.drop(columns=['Unnamed: 0'])

import colorlover as cl
from IPython.display import HTML
HTML(cl.to_html( cl.flipper()['seq']['3'] ))

colors = cl.scales['9']['seq']['Purples']
print('Color we chose in this notebook:\n')
HTML(cl.to_html(colors))

import plotly.graph_objs as go
import plotly.offline as py
trace1 = go.Bar(x = subway_data['BORO_NM'].value_counts().sort_index().index, 
                y = subway_data.BORO_NM[subway_data.LAW_CAT_CD == 'MISDEMEANOR'].value_counts().sort_index(),
                name = 'MISDEMEANOR', 
                text = (subway_data.BORO_NM[subway_data.LAW_CAT_CD == 'MISDEMEANOR'].value_counts()/subway_data.BORO_NM.value_counts()).apply(lambda x: format(x, '.2%')).sort_index(),
                hovertext='Ratio: '+ (subway_data.BORO_NM[subway_data.LAW_CAT_CD == 'MISDEMEANOR'].value_counts()/subway_data.BORO_NM.count()).apply(lambda x: format(x, '.3%')).sort_index(),
                textposition = 'inside', 
                insidetextanchor='middle',
                textfont = dict(size=16),
                marker = dict(color=colors[7], 
                              line=dict(color=colors[7],
                                        width=2)),
                opacity = 0.6)
trace2 = go.Bar(x = subway_data['BORO_NM'].value_counts().sort_index().index, 
                y = subway_data.BORO_NM[subway_data.LAW_CAT_CD == 'FELONY'].value_counts().sort_index(),
                name = 'FELONY', 
                text = (subway_data.BORO_NM[subway_data.LAW_CAT_CD == 'FELONY'].value_counts()/subway_data.BORO_NM.value_counts()).apply(lambda x: format(x, '.2%')).sort_index(),
                hovertext='Ratio: '+ (subway_data.BORO_NM[subway_data.LAW_CAT_CD == 'FELONY'].value_counts()/subway_data.BORO_NM.count()).apply(lambda x: format(x, '.3%')).sort_index(),
                textposition = 'inside', 
                insidetextanchor='middle',
                textfont = dict(size=16),
                marker = dict(color=colors[5], 
                              line=dict(color=colors[7],
                                        width=2)),
                opacity = 0.6)
trace3 = go.Bar(x = subway_data['BORO_NM'].value_counts().sort_index().index, 
                y = subway_data.BORO_NM[subway_data.LAW_CAT_CD == 'VIOLATION'].value_counts().sort_index(),
                name = 'VIOLATION', 
                text = (subway_data.BORO_NM[subway_data.LAW_CAT_CD == 'VIOLATION'].value_counts()/subway_data.BORO_NM.value_counts()).apply(lambda x: format(x, '.2%')).sort_index(),
                hovertext='Ratio: '+ (subway_data.BORO_NM[subway_data.LAW_CAT_CD == 'VIOLATION'].value_counts()/subway_data.BORO_NM.count()).apply(lambda x: format(x, '.3%')).sort_index(),
                textposition = 'inside', 
                insidetextanchor='middle',
                textfont = dict(size=16),
                marker = dict(color=colors[2], 
                              line=dict(color=colors[7],
                                        width=2)),
                opacity = 0.6)

d=[trace1,trace2,trace3]

layout = go.Layout(title = {'text':'TRANSIT - NYC SUBWAY',
                            'y':0.9,
                            'x':0.5,
                            'xanchor':'center',
                            'yanchor': 'top'},  
                   xaxis = dict(title = 'Borough'),
                   yaxis = dict(title = 'No. of Crimes'), width=800, height=600)

figure = go.Figure(data = d, layout = layout)
figure.update_layout(barmode='stack')
py.iplot(figure)

trace1 = go.Bar(x = nyc_bus_data['BORO_NM'].value_counts().sort_index().index, 
                y = nyc_bus_data.BORO_NM[nyc_bus_data.LAW_CAT_CD == 'MISDEMEANOR'].value_counts().sort_index(),
                name = 'MISDEMEANOR', 
                text = (nyc_bus_data.BORO_NM[nyc_bus_data.LAW_CAT_CD == 'MISDEMEANOR'].value_counts()/nyc_bus_data.BORO_NM.value_counts()).apply(lambda x: format(x, '.2%')).sort_index(),
                hovertext='Ratio: '+ (nyc_bus_data.BORO_NM[nyc_bus_data.LAW_CAT_CD == 'MISDEMEANOR'].value_counts()/nyc_bus_data.BORO_NM.count()).apply(lambda x: format(x, '.3%')).sort_index(),
                textposition = 'inside', 
                insidetextanchor='middle',
                textfont = dict(size=16),
                marker = dict(color=colors[2], 
                              line=dict(color=colors[7],
                                        width=2)),
                opacity = 0.6)
trace2 = go.Bar(x = nyc_bus_data['BORO_NM'].value_counts().sort_index().index, 
                y = nyc_bus_data.BORO_NM[nyc_bus_data.LAW_CAT_CD == 'FELONY'].value_counts().sort_index(),
                name = 'FELONY',
                text = (nyc_bus_data.BORO_NM[nyc_bus_data.LAW_CAT_CD == 'FELONY'].value_counts()/nyc_bus_data.BORO_NM.value_counts()).apply(lambda x: format(x, '.2%')).sort_index(),
                hovertext ='Ratio: '+ (nyc_bus_data.BORO_NM[nyc_bus_data.LAW_CAT_CD == 'FELONY'].value_counts()/nyc_bus_data.BORO_NM.count()).apply(lambda x: format(x, '.3%')).sort_index(),
                textposition = 'inside', 
                insidetextanchor='middle',
                textfont = dict(size=16),
                marker = dict(color=colors[5], 
                              line=dict(color=colors[7],
                                        width=2)),
                opacity = 0.6)
trace3 = go.Bar(x = nyc_bus_data.BORO_NM.value_counts().sort_index().index, 
                y = nyc_bus_data.BORO_NM[nyc_bus_data.LAW_CAT_CD == 'VIOLATION'].value_counts().sort_index(),
                name = 'VIOLATION', 
                text = (nyc_bus_data.BORO_NM[nyc_bus_data.LAW_CAT_CD == 'VIOLATION'].value_counts()/nyc_bus_data.BORO_NM.value_counts()).apply(lambda x: format(x, '.2%')).sort_index(),
                hovertext= 'Ratio: '+ (nyc_bus_data.BORO_NM[nyc_bus_data.LAW_CAT_CD == 'VIOLATION'].value_counts()/nyc_bus_data.BORO_NM.count()).apply(lambda x: format(x, '.3%')).sort_index(),
                textposition = 'inside', 
                insidetextanchor='middle',
                textfont = dict(size=16),
                marker = dict(color=colors[8], 
                              line=dict(color=colors[7],
                                        width=2)),
                opacity = 0.6)

d=[trace1,trace2,trace3]

layout = go.Layout(title = {'text':'TRANSIT - NYC BUS',
                            'y':0.9,
                            'x':0.5,
                            'xanchor':'center',
                            'yanchor': 'top'},  
                   xaxis = dict(title = 'Borough'),
                   yaxis = dict(title = 'No. of Crimes'), width=800, height=600)

figure = go.Figure(data = d, layout = layout)
figure.update_layout(barmode='stack')
py.iplot(figure)

trace1 = go.Bar(x = other_bus_data['BORO_NM'].value_counts().sort_index().index, 
                y = other_bus_data.BORO_NM[other_bus_data.LAW_CAT_CD == 'MISDEMEANOR'].value_counts().sort_index(),
                name = 'MISDEMEANOR', 
                text = (other_bus_data.BORO_NM[other_bus_data.LAW_CAT_CD == 'MISDEMEANOR'].value_counts()/other_bus_data.BORO_NM.value_counts()).apply(lambda x: format(x, '.2%')).sort_index(),
                hovertext='Ratio: '+ (other_bus_data.BORO_NM[other_bus_data.LAW_CAT_CD == 'MISDEMEANOR'].value_counts()/other_bus_data.BORO_NM.count()).apply(lambda x: format(x, '.3%')).sort_index(),
                textposition = 'inside', 
                insidetextanchor='middle',
                textfont = dict(size=16),
                marker = dict(color=colors[5], 
                              line=dict(color=colors[7],
                                        width=2)),
                opacity = 0.6)
trace2 = go.Bar(x = other_bus_data['BORO_NM'].value_counts().sort_index().index, 
                y = other_bus_data.BORO_NM[other_bus_data.LAW_CAT_CD == 'FELONY'].value_counts().sort_index(),
                name = 'FELONY',
                text = (other_bus_data.BORO_NM[other_bus_data.LAW_CAT_CD == 'FELONY'].value_counts()/other_bus_data.BORO_NM.value_counts()).apply(lambda x: format(x, '.2%')).sort_index(),
                hovertext ='Ratio: '+ (other_bus_data.BORO_NM[other_bus_data.LAW_CAT_CD == 'FELONY'].value_counts()/other_bus_data.BORO_NM.count()).apply(lambda x: format(x, '.3%')).sort_index(),
                textposition = 'inside', 
                insidetextanchor='middle',
                textfont = dict(size=16),
                marker = dict(color=colors[8], 
                              line=dict(color=colors[7],
                                        width=2)),
                opacity = 0.6)
trace3 = go.Bar(x = other_bus_data.BORO_NM.value_counts().sort_index().index, 
                y = other_bus_data.BORO_NM[other_bus_data.LAW_CAT_CD == 'VIOLATION'].value_counts().sort_index(),
                name = 'VIOLATION', 
                text = (other_bus_data.BORO_NM[other_bus_data.LAW_CAT_CD == 'VIOLATION'].value_counts()/other_bus_data.BORO_NM.value_counts()).apply(lambda x: format(x, '.2%')).sort_index(),
                hovertext= 'Ratio: '+ (other_bus_data.BORO_NM[other_bus_data.LAW_CAT_CD == 'VIOLATION'].value_counts()/other_bus_data.BORO_NM.count()).apply(lambda x: format(x, '.3%')).sort_index(),
                textposition = 'inside', 
                insidetextanchor='middle',
                textfont = dict(size=16),
                marker = dict(color=colors[1], 
                              line=dict(color=colors[7],
                                        width=2)),
                opacity = 0.6)

d=[trace1,trace2,trace3]

layout = go.Layout(title = {'text':'TRANSIT - OTHER BUS',
                            'y':0.9,
                            'x':0.5,
                            'xanchor':'center',
                            'yanchor': 'top'},  
                   xaxis = dict(title = 'Borough'),
                   yaxis = dict(title = 'No. of Crimes'), width=800, height=600)

figure = go.Figure(data = d, layout = layout)
figure.update_layout(barmode='stack')
py.iplot(figure)

trace1 = go.Bar(x = chain_store_data['BORO_NM'].value_counts().sort_index().index, 
                y = chain_store_data.BORO_NM[chain_store_data.LAW_CAT_CD == 'MISDEMEANOR'].value_counts().sort_index(),
                name = 'MISDEMEANOR', 
                text = (chain_store_data.BORO_NM[chain_store_data.LAW_CAT_CD == 'MISDEMEANOR'].value_counts()/chain_store_data.BORO_NM.value_counts()).apply(lambda x: format(x, '.2%')).sort_index(),
                hovertext='Ratio: '+ (chain_store_data.BORO_NM[chain_store_data.LAW_CAT_CD == 'MISDEMEANOR'].value_counts()/chain_store_data.BORO_NM.count()).apply(lambda x: format(x, '.3%')).sort_index(),
                textposition = 'inside', 
                insidetextanchor='middle',
                textfont = dict(size=16),
                marker = dict(color=colors[6], 
                              line=dict(color=colors[5],
                                        width=2)),
                opacity = 0.6)
trace2 = go.Bar(x = chain_store_data['BORO_NM'].value_counts().sort_index().index, 
                y = chain_store_data.BORO_NM[chain_store_data.LAW_CAT_CD == 'FELONY'].value_counts().sort_index(),
                name = 'FELONY',
                text = (chain_store_data.BORO_NM[chain_store_data.LAW_CAT_CD == 'FELONY'].value_counts()/chain_store_data.BORO_NM.value_counts()).apply(lambda x: format(x, '.2%')).sort_index(),
                hovertext ='Ratio: '+ (chain_store_data.BORO_NM[chain_store_data.LAW_CAT_CD == 'FELONY'].value_counts()/chain_store_data.BORO_NM.count()).apply(lambda x: format(x, '.3%')).sort_index(),
                textposition = 'inside', 
                insidetextanchor='middle',
                textfont = dict(size=16),
                marker = dict(color=colors[3], 
                              line=dict(color=colors[5],
                                        width=2)),
                opacity = 0.6)
trace3 = go.Bar(x = chain_store_data.BORO_NM.value_counts().sort_index().index, 
                y = chain_store_data.BORO_NM[chain_store_data.LAW_CAT_CD == 'VIOLATION'].value_counts().sort_index(),
                name = 'VIOLATION', 
                text = (chain_store_data.BORO_NM[chain_store_data.LAW_CAT_CD == 'VIOLATION'].value_counts()/chain_store_data.BORO_NM.value_counts()).apply(lambda x: format(x, '.2%')).sort_index(),
                hovertext= 'Ratio: '+ (chain_store_data.BORO_NM[chain_store_data.LAW_CAT_CD == 'VIOLATION'].value_counts()/chain_store_data.BORO_NM.count()).apply(lambda x: format(x, '.3%')).sort_index(),
                textposition = 'inside', 
                insidetextanchor='middle',
                textfont = dict(size=16),
                marker = dict(color=colors[1], 
                              line=dict(color=colors[5],
                                        width=2)),
                opacity = 0.6)

d=[trace1,trace2,trace3]

layout = go.Layout(title = {'text':'CHAIN STORE',
                            'y':0.9,
                            'x':0.5,
                            'xanchor':'center',
                            'yanchor': 'top'},  
                   xaxis = dict(title = 'Borough'),
                   yaxis = dict(title = 'No. of Crimes'), width=800, height=600)

figure = go.Figure(data = d, layout = layout)
figure.update_layout(barmode='stack')
py.iplot(figure)